// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/br/ufes/analisador/lexico/jflex/cmenosmenos.lex

package br.ufes.analisador.lexico.jflex;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u1f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u1f00\1\u4900\1\u1f00\1\u4a00\1\u4b00\2\u1f00\3\u0100\1\u4c00"+
    "\1\u4d00\1\u4e00\12\u1f00\4\u0100\1\u4f00\17\u1f00\2\u0100\1\u5000"+
    "\41\u1f00\2\u0100\1\u5100\1\u5200\3\u1f00\1\u5300\27\u0100\1\u5400"+
    "\2\u0100\1\u5500\45\u1f00\1\u0100\1\u5600\1\u5700\11\u1f00\1\u5800"+
    "\24\u1f00\1\u5900\1\u5a00\1\u1f00\1\u5b00\1\u5c00\1\u5d00\1\u5e00"+
    "\2\u1f00\1\u5f00\5\u1f00\1\u6000\7\u1f00\1\u6100\1\u6200\4\u1f00"+
    "\1\u6300\21\u1f00\246\u0100\1\u6400\20\u0100\1\u6500\1\u6600\25\u0100"+
    "\1\u6700\34\u0100\1\u6800\14\u1f00\2\u0100\1\u6900\u0b05\u1f00\1\u6a00"+
    "\1\u6b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\3\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\11\24\1\3\1\25\1\26\1\27\1\30\2\3"+
    "\1\31\2\10\1\32\11\10\1\33\1\34\2\10\1\35"+
    "\10\10\1\36\1\37\1\40\1\3\1\10\1\3\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\10\1\52\1\53\1\10\1\54\1\55\1\56\1\10"+
    "\1\57\1\60\1\61\1\62\1\63\1\10\1\64\2\10"+
    "\1\65\1\66\1\67\1\3\41\0\2\3\4\10\4\3"+
    "\1\10\2\3\1\0\7\3\1\10\4\3\1\10\5\3"+
    "\27\10\1\3\37\10\1\3\u01ca\10\4\3\14\10\16\3"+
    "\5\10\7\3\1\10\1\3\1\10\21\3\160\0\5\10"+
    "\1\3\2\10\2\3\4\10\1\3\1\10\6\3\1\10"+
    "\1\3\3\10\1\3\1\10\1\3\24\10\1\3\123\10"+
    "\1\3\213\10\1\3\5\0\2\3\246\10\1\3\46\10"+
    "\2\3\1\10\7\3\47\10\7\3\1\10\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\10\5\3\3\10\15\3\6\0\5\3\1\10"+
    "\4\3\13\0\1\3\1\0\3\3\53\10\37\0\4\3"+
    "\2\10\1\0\143\10\1\3\1\10\10\0\1\3\6\0"+
    "\2\10\2\0\1\3\4\0\2\10\12\0\3\10\2\3"+
    "\1\10\17\3\1\0\1\10\1\0\36\10\33\0\2\3"+
    "\131\10\13\0\1\10\16\3\12\0\41\10\11\0\2\10"+
    "\4\3\1\10\5\3\26\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\5\0\22\3\31\10\3\0\4\3\13\10"+
    "\65\3\25\10\1\3\10\10\26\3\60\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\2\0\2\3\12\0"+
    "\1\3\20\10\3\0\1\3\10\10\2\3\2\10\2\3"+
    "\26\10\1\3\7\10\1\3\1\10\3\3\4\10\2\3"+
    "\1\0\1\10\7\0\2\3\2\0\2\3\3\0\1\10"+
    "\10\3\1\0\4\3\2\10\1\3\3\10\2\0\2\3"+
    "\12\0\4\10\7\3\2\10\4\3\3\0\1\3\6\10"+
    "\4\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\2\10\1\3\2\10\2\3\1\0\1\3\5\0"+
    "\4\3\2\0\2\3\3\0\3\3\1\0\7\3\4\10"+
    "\1\3\1\10\7\3\14\0\3\10\1\0\13\3\3\0"+
    "\1\3\11\10\1\3\3\10\1\3\26\10\1\3\7\10"+
    "\1\3\2\10\1\3\5\10\2\3\1\0\1\10\10\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\10\17\3\2\10"+
    "\2\0\2\3\12\0\1\3\1\10\7\3\1\10\6\0"+
    "\1\3\3\0\1\3\10\10\2\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\2\10\1\3\5\10\2\3\1\0"+
    "\1\10\7\0\2\3\2\0\2\3\3\0\10\3\2\0"+
    "\4\3\2\10\1\3\3\10\2\0\2\3\12\0\1\3"+
    "\1\10\20\3\1\0\1\10\1\3\6\10\3\3\3\10"+
    "\1\3\4\10\3\3\2\10\1\3\1\10\1\3\2\10"+
    "\3\3\2\10\3\3\3\10\3\3\14\10\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\10\6\3\1\0"+
    "\16\3\12\0\11\3\1\10\6\3\4\0\1\3\10\10"+
    "\1\3\3\10\1\3\27\10\1\3\20\10\3\3\1\10"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\1\3"+
    "\3\10\5\3\2\10\2\0\2\3\12\0\20\3\1\10"+
    "\3\0\1\3\10\10\1\3\3\10\1\3\27\10\1\3"+
    "\12\10\1\3\5\10\2\3\1\0\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\7\3\1\10\1\3"+
    "\2\10\2\0\2\3\12\0\1\3\2\10\15\3\4\0"+
    "\1\3\10\10\1\3\3\10\1\3\51\10\2\0\1\10"+
    "\7\0\1\3\3\0\1\3\4\0\1\10\5\3\3\10"+
    "\1\0\7\3\3\10\2\0\2\3\12\0\12\3\6\10"+
    "\2\3\2\0\1\3\22\10\3\3\30\10\1\3\11\10"+
    "\1\3\1\10\2\3\7\10\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\0\2\3\2\0"+
    "\15\3\60\10\1\0\2\10\7\0\4\3\10\10\10\0"+
    "\1\3\12\0\47\3\2\10\1\3\1\10\2\3\2\10"+
    "\1\3\1\10\2\3\1\10\6\3\4\10\1\3\7\10"+
    "\1\3\3\10\1\3\1\10\1\3\1\10\2\3\2\10"+
    "\1\3\4\10\1\0\2\10\6\0\1\3\2\0\1\10"+
    "\2\3\5\10\1\3\1\10\1\3\6\0\2\3\12\0"+
    "\2\3\4\10\40\3\1\10\27\3\2\0\6\3\12\0"+
    "\13\3\1\0\1\3\1\0\1\3\1\0\4\3\2\0"+
    "\10\10\1\3\44\10\4\3\24\0\1\3\2\0\5\10"+
    "\13\0\1\3\44\0\11\3\1\0\71\3\53\10\24\0"+
    "\1\10\12\0\6\3\6\10\4\0\4\10\3\0\1\10"+
    "\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\17\0\2\3\46\10\1\3\1\10\5\3\1\10\2\3"+
    "\53\10\1\3\115\10\1\3\4\10\2\3\7\10\1\3"+
    "\1\10\1\3\4\10\2\3\51\10\1\3\4\10\2\3"+
    "\41\10\1\3\4\10\2\3\7\10\1\3\1\10\1\3"+
    "\4\10\2\3\17\10\1\3\71\10\1\3\4\10\2\3"+
    "\103\10\2\3\3\0\40\3\20\10\20\3\126\10\2\3"+
    "\6\10\3\3\u016c\10\2\3\21\10\1\3\32\10\5\3"+
    "\113\10\3\3\13\10\7\3\15\10\1\3\4\10\3\0"+
    "\13\3\22\10\3\0\13\3\22\10\2\0\14\3\15\10"+
    "\1\3\3\10\1\3\2\0\14\3\64\10\40\0\3\3"+
    "\1\10\3\3\2\10\1\0\2\3\12\0\41\3\4\0"+
    "\1\3\12\0\6\3\130\10\10\3\5\10\2\0\42\10"+
    "\1\0\1\10\5\3\106\10\12\3\37\10\1\3\14\0"+
    "\4\3\14\0\12\3\12\0\36\10\2\3\5\10\13\3"+
    "\54\10\4\3\32\10\6\3\12\0\46\3\27\10\5\0"+
    "\4\3\65\10\12\0\1\3\35\0\2\3\13\0\6\3"+
    "\12\0\15\3\1\10\10\3\16\0\102\3\5\0\57\10"+
    "\21\0\7\10\4\3\12\0\21\3\11\0\14\3\3\0"+
    "\36\10\15\0\2\10\12\0\54\10\16\0\14\3\44\10"+
    "\24\0\10\3\12\0\3\3\3\10\12\0\44\10\2\3"+
    "\11\10\107\3\3\0\1\3\25\0\4\10\1\0\4\10"+
    "\3\0\2\10\3\0\6\3\300\10\72\0\1\3\5\0"+
    "\26\10\2\3\6\10\2\3\46\10\2\3\6\10\2\3"+
    "\10\10\1\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\37\10\2\3\65\10\1\3\7\10\1\3\1\10\3\3"+
    "\3\10\1\3\7\10\3\3\4\10\2\3\6\10\4\3"+
    "\15\10\5\3\3\10\1\3\7\10\16\3\5\0\32\3"+
    "\5\0\20\3\2\10\23\3\1\10\13\3\5\0\1\3"+
    "\12\0\1\3\1\10\15\3\1\10\20\3\15\10\3\3"+
    "\40\10\20\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\10\4\3\1\10\2\3\12\10\1\3\1\10\3\3"+
    "\5\10\6\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\4\10\1\3\13\10\2\3\4\10\5\3\5\10\4\3"+
    "\1\10\21\3\51\10\u0177\3\57\10\1\3\57\10\1\3"+
    "\205\10\6\3\4\10\3\0\2\10\14\3\46\10\1\3"+
    "\1\10\5\3\1\10\2\3\70\10\7\3\1\10\17\3"+
    "\1\0\27\10\11\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\40\0\57\3\1\10\325\3\3\10"+
    "\31\3\11\10\6\0\1\3\5\10\2\3\5\10\4\3"+
    "\126\10\2\3\2\0\2\3\3\10\1\3\132\10\1\3"+
    "\4\10\5\3\52\10\2\3\136\10\21\3\33\10\65\3"+
    "\306\10\112\3\353\10\25\3\215\10\103\3\56\10\2\3"+
    "\15\10\3\3\20\10\12\0\2\10\24\3\57\10\1\0"+
    "\4\3\12\0\1\3\37\10\2\0\120\10\2\0\45\3"+
    "\11\10\2\3\147\10\2\3\44\10\1\3\10\10\77\3"+
    "\13\10\1\0\3\10\1\0\4\10\1\0\27\10\5\0"+
    "\20\3\1\10\7\3\64\10\14\3\2\0\62\10\22\0"+
    "\12\3\12\0\6\3\22\0\6\10\3\3\1\10\1\3"+
    "\1\10\2\3\12\0\34\10\10\0\2\3\27\10\15\0"+
    "\14\3\35\10\3\3\4\0\57\10\16\0\16\3\1\10"+
    "\12\0\6\3\5\10\1\0\12\10\12\0\5\10\1\3"+
    "\51\10\16\0\11\3\3\10\1\0\10\10\2\0\2\3"+
    "\12\0\6\3\27\10\3\3\1\10\3\0\62\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0"+
    "\1\10\30\3\3\10\2\3\13\10\5\0\2\3\3\10"+
    "\2\0\12\3\6\10\2\3\6\10\2\3\6\10\11\3"+
    "\7\10\1\3\7\10\1\3\53\10\1\3\12\10\12\3"+
    "\163\10\10\0\1\3\2\0\2\3\12\0\6\3\244\10"+
    "\14\3\27\10\4\3\61\10\4\3\156\10\2\3\152\10"+
    "\46\3\7\10\14\3\5\10\5\3\1\10\1\0\12\10"+
    "\1\3\15\10\1\3\5\10\1\3\1\10\1\3\2\10"+
    "\1\3\2\10\1\3\154\10\41\3\153\10\22\3\100\10"+
    "\2\3\66\10\50\3\15\10\3\3\20\0\20\3\20\0"+
    "\3\3\2\10\30\3\3\10\31\3\1\10\6\3\5\10"+
    "\1\3\207\10\2\3\1\0\4\3\1\10\13\3\12\0"+
    "\7\3\32\10\4\3\1\10\1\3\32\10\13\3\131\10"+
    "\3\3\6\10\2\3\6\10\2\3\6\10\2\3\3\10"+
    "\3\3\2\10\3\3\2\10\22\3\3\0\4\3\14\10"+
    "\1\3\32\10\1\3\23\10\1\3\2\10\1\3\17\10"+
    "\2\3\16\10\42\3\173\10\105\3\65\10\210\3\1\0"+
    "\202\3\35\10\3\3\61\10\17\3\1\0\37\3\40\10"+
    "\15\3\36\10\5\3\46\10\5\0\5\3\36\10\2\3"+
    "\44\10\4\3\10\10\1\3\5\10\52\3\236\10\2\3"+
    "\12\0\6\3\44\10\4\3\44\10\4\3\50\10\10\3"+
    "\64\10\234\3\67\10\11\3\26\10\12\3\10\10\230\3"+
    "\6\10\2\3\1\10\1\3\54\10\1\3\2\10\3\3"+
    "\1\10\2\3\27\10\12\3\27\10\11\3\37\10\101\3"+
    "\23\10\1\3\2\10\12\3\26\10\12\3\32\10\106\3"+
    "\70\10\6\3\2\10\100\3\1\10\3\0\1\3\2\0"+
    "\5\3\4\0\4\10\1\3\3\10\1\3\33\10\4\3"+
    "\3\0\4\3\1\0\40\3\35\10\3\3\35\10\43\3"+
    "\10\10\1\3\34\10\2\0\31\3\66\10\12\3\26\10"+
    "\12\3\23\10\15\3\22\10\156\3\111\10\67\3\63\10"+
    "\15\3\63\10\15\3\3\0\65\10\17\0\37\3\12\0"+
    "\17\3\4\0\55\10\13\0\2\3\1\0\22\3\31\10"+
    "\7\3\12\0\6\3\3\0\44\10\16\0\1\3\12\0"+
    "\20\3\43\10\1\0\2\3\1\10\11\3\3\0\60\10"+
    "\16\0\4\10\5\3\3\0\3\3\12\0\1\10\1\3"+
    "\1\10\43\3\22\10\1\3\31\10\14\0\6\3\1\0"+
    "\101\3\7\10\1\3\1\10\1\3\4\10\1\3\17\10"+
    "\1\3\12\10\7\3\57\10\14\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\10\2\3\2\10\2\3\26\10\1\3"+
    "\7\10\1\3\2\10\1\3\5\10\2\3\1\0\1\10"+
    "\7\0\2\3\2\0\2\3\3\0\2\3\1\10\6\3"+
    "\1\0\5\3\5\10\2\0\2\3\7\0\3\3\5\0"+
    "\213\3\65\10\22\0\4\10\5\3\12\0\46\3\60\10"+
    "\24\0\2\10\1\3\1\10\10\3\12\0\246\3\57\10"+
    "\7\0\2\3\11\0\27\3\4\10\2\0\42\3\60\10"+
    "\21\0\3\3\1\10\13\3\12\0\46\3\53\10\15\0"+
    "\10\3\12\0\66\3\32\10\3\3\17\0\4\3\12\0"+
    "\u0166\3\100\10\12\0\25\3\2\10\12\0\50\10\7\0"+
    "\1\10\4\0\10\3\1\0\10\3\1\10\13\0\50\10"+
    "\2\3\4\10\20\0\46\3\71\10\7\3\11\10\1\3"+
    "\45\10\10\0\1\3\10\0\1\10\17\3\12\0\30\3"+
    "\36\10\2\3\26\0\1\3\16\0\111\3\7\10\1\3"+
    "\2\10\1\3\46\10\6\0\3\3\1\0\1\3\2\0"+
    "\1\3\7\0\1\10\1\0\10\3\12\0\246\3\232\10"+
    "\146\3\157\10\21\3\304\10\274\3\57\10\321\3\107\10"+
    "\271\3\71\10\7\3\37\10\1\3\12\0\146\3\36\10"+
    "\2\3\5\0\13\3\60\10\7\0\11\3\4\10\14\3"+
    "\12\0\11\3\25\10\5\3\23\10\160\3\105\10\13\3"+
    "\1\10\56\0\20\3\4\0\15\10\100\3\2\10\36\3"+
    "\355\10\23\3\363\10\15\3\37\10\121\3\u018c\10\4\3"+
    "\153\10\5\3\15\10\3\3\11\10\7\3\12\10\3\3"+
    "\2\0\1\3\4\0\301\3\5\0\3\3\26\0\2\3"+
    "\7\0\36\3\4\0\224\3\3\0\273\3\125\10\1\3"+
    "\107\10\1\3\2\10\2\3\1\10\2\3\2\10\2\3"+
    "\4\10\1\3\14\10\1\3\1\10\1\3\7\10\1\3"+
    "\101\10\1\3\4\10\2\3\10\10\1\3\7\10\1\3"+
    "\34\10\1\3\4\10\1\3\5\10\1\3\1\10\3\3"+
    "\7\10\1\3\u0154\10\2\3\31\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\10\10\2\3\151\0\4\3\62\0\10\3\1\0\16\3"+
    "\1\0\26\3\5\0\1\3\17\0\120\3\7\0\1\3"+
    "\21\0\2\3\7\0\1\3\2\0\1\3\5\0\325\3"+
    "\305\10\13\3\7\0\51\3\104\10\7\0\5\3\12\0"+
    "\246\3\4\10\1\3\33\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\12\10\1\3\4\10\1\3\1\10"+
    "\1\3\1\10\6\3\1\10\4\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\3\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\2\10\1\3\1\10\2\3\4\10"+
    "\1\3\7\10\1\3\4\10\1\3\4\10\1\3\1\10"+
    "\1\3\12\10\1\3\21\10\5\3\3\10\1\3\5\10"+
    "\1\3\21\10\104\3\327\10\51\3\65\10\13\3\336\10"+
    "\2\3\u0182\10\16\3\u0131\10\37\3\36\10\343\3\1\0"+
    "\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\2\4\1\24\1\25"+
    "\15\4\1\26\1\27\1\30\1\31\1\32\6\0\1\33"+
    "\1\0\1\34\1\0\1\35\1\36\1\37\1\0\1\1"+
    "\1\40\1\0\1\41\1\42\1\43\1\4\1\44\10\4"+
    "\1\45\12\4\1\46\1\47\1\50\1\51\1\52\1\31"+
    "\1\53\1\31\1\53\1\0\7\31\4\0\1\54\1\55"+
    "\10\4\1\56\11\4\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\1\0\1\66\1\4\1\67\2\4"+
    "\1\70\2\4\1\71\7\4\1\72\1\0\1\73\1\74"+
    "\2\4\1\75\2\4\1\76\1\77\3\4\1\0\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\4\1\106\1\4"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\250\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\250\0\250\0\u0230\0\u0268\0\250"+
    "\0\u02a0\0\250\0\u02d8\0\u0310\0\u0348\0\250\0\u0380\0\u03b8"+
    "\0\u03f0\0\u0428\0\u0460\0\250\0\250\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\250\0\250\0\u0770\0\250\0\250\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\250\0\u08f8\0\250"+
    "\0\u0930\0\250\0\250\0\250\0\u0968\0\u09a0\0\250\0\u09d8"+
    "\0\250\0\250\0\250\0\u0a10\0\u0188\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0188\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\250\0\250\0\250\0\250\0\250\0\u0e38\0\250\0\u0818"+
    "\0\u0818\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u09d8\0\u0188\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u0188"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u0818\0\u0818\0\u0818\0\u0818\0\u0818\0\u0818\0\u14c8"+
    "\0\250\0\u1500\0\u0188\0\u1538\0\u0188\0\u1570\0\u15a8\0\u0188"+
    "\0\u15e0\0\u1618\0\u0188\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u0188\0\u17d8\0\u0188\0\u0188\0\u1810\0\u1848"+
    "\0\u0188\0\u1880\0\u18b8\0\u0188\0\u0188\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u19d0"+
    "\0\250\0\u1a08\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\11\1\33\1\11\1\34\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\2\11\1\44\1\11"+
    "\1\45\2\11\1\46\1\47\1\50\1\11\1\51\1\52"+
    "\1\11\1\53\1\0\1\54\2\55\1\56\1\55\1\0"+
    "\1\55\1\57\30\55\1\60\30\55\2\61\1\56\1\61"+
    "\1\0\1\61\1\62\3\61\1\63\24\61\1\64\14\61"+
    "\1\65\2\61\1\65\1\61\1\65\4\61\1\65\1\61"+
    "\72\0\1\4\114\0\1\66\104\0\1\67\23\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\24\11"+
    "\32\0\1\70\77\0\1\71\57\0\1\72\67\0\1\73"+
    "\67\0\1\74\55\0\1\75\4\0\1\76\4\0\1\77"+
    "\61\0\1\100\67\0\1\100\1\0\2\25\72\0\1\101"+
    "\67\0\1\102\67\0\1\103\40\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\2\11\1\104\2\11\3\0\24\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\4\11"+
    "\1\105\3\0\24\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\21\11\1\106\2\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\16\11\1\107\5\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\7\11\1\110\4\11\1\111"+
    "\7\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\14\11\1\112\7\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\12\11\1\113"+
    "\10\11\1\114\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\12\11\1\115\11\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\5\11"+
    "\1\116\5\11\1\117\10\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\14\11\1\120\7\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\16\11\1\121\5\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\4\11\1\122\17\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\2\11\1\123\4\11\1\124\1\125\7\11\1\126"+
    "\3\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\13\11\1\127\10\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\14\11\1\130"+
    "\7\11\3\0\2\55\1\0\1\55\1\0\1\55\1\0"+
    "\30\55\1\0\30\55\6\0\1\131\30\0\1\132\14\0"+
    "\1\133\2\0\1\134\1\0\1\135\6\0\2\136\1\56"+
    "\1\136\1\0\1\136\1\0\3\136\1\137\24\136\1\0"+
    "\30\136\6\0\1\140\3\0\1\140\24\0\1\140\14\0"+
    "\1\140\2\0\1\140\1\0\1\140\4\0\1\140\7\0"+
    "\1\140\3\0\1\141\24\0\1\140\14\0\1\140\2\0"+
    "\1\140\1\0\1\140\4\0\1\140\1\0\6\142\1\143"+
    "\3\142\1\144\24\142\1\145\14\142\1\146\2\142\1\147"+
    "\1\142\1\150\4\142\1\140\1\142\2\136\1\56\1\136"+
    "\1\0\1\136\1\140\3\136\1\141\24\136\1\140\14\136"+
    "\1\151\2\136\1\151\1\136\1\151\4\136\1\151\1\136"+
    "\45\0\1\152\76\0\1\153\13\0\15\154\1\155\52\154"+
    "\2\76\1\4\1\76\1\5\63\76\23\0\2\156\43\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\1\11\1\157"+
    "\3\11\3\0\24\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\20\11\1\160\3\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\4\11\1\161\17\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\1\162\23\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\13\11"+
    "\1\163\10\11\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\21\11\1\164\2\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\17\11"+
    "\1\165\4\11\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\20\11\1\166\3\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\14\11"+
    "\1\167\7\11\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\20\11\1\170\3\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\13\11"+
    "\1\171\10\11\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\10\11\1\172\13\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\20\11"+
    "\1\173\3\11\3\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\1\174\23\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\14\11\1\175"+
    "\7\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\6\11\1\176\15\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\1\177\23\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\17\11\1\200\4\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\10\11\1\201\13\11"+
    "\3\0\2\136\1\56\1\136\1\0\1\136\1\0\3\136"+
    "\1\56\24\136\1\0\30\136\12\0\1\56\63\0\1\140"+
    "\3\0\1\202\24\0\1\140\14\0\1\140\2\0\1\140"+
    "\1\0\1\140\4\0\1\140\7\0\1\140\3\0\1\203"+
    "\24\0\1\140\14\0\1\140\2\0\1\140\1\0\1\140"+
    "\4\0\1\140\7\0\1\140\3\0\1\204\24\0\1\140"+
    "\14\0\1\140\2\0\1\140\1\0\1\140\4\0\1\140"+
    "\7\0\1\140\3\0\1\205\24\0\1\140\14\0\1\140"+
    "\2\0\1\140\1\0\1\140\4\0\1\140\7\0\1\140"+
    "\3\0\1\206\24\0\1\140\14\0\1\140\2\0\1\140"+
    "\1\0\1\140\4\0\1\140\7\0\1\140\3\0\1\207"+
    "\24\0\1\140\14\0\1\140\2\0\1\140\1\0\1\140"+
    "\4\0\1\140\1\0\2\136\1\56\1\136\1\0\1\136"+
    "\1\140\3\136\1\140\24\136\1\140\14\136\1\151\2\136"+
    "\1\151\1\136\1\151\4\136\1\151\1\136\46\0\1\210"+
    "\33\0\1\211\55\0\15\154\1\212\52\154\15\0\1\155"+
    "\4\0\1\4\45\0\1\11\7\0\1\11\12\0\2\11"+
    "\4\0\5\11\3\0\14\11\1\213\7\11\3\0\1\11"+
    "\7\0\1\11\12\0\2\11\4\0\5\11\3\0\1\214"+
    "\23\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\16\11\1\215\5\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\17\11\1\216"+
    "\4\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\1\11\1\217\22\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\4\11\1\220"+
    "\17\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\4\11\1\221\17\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\1\222\23\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\6\11\1\223\15\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\13\11\1\224\10\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\21\11\1\225\2\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\13\11\1\226\10\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\16\11\1\227\5\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\13\11\1\230\10\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\20\11\1\231\3\11\3\0\1\11\7\0\1\11"+
    "\12\0\2\11\4\0\5\11\3\0\10\11\1\232\13\11"+
    "\3\0\1\11\7\0\1\11\12\0\2\11\4\0\5\11"+
    "\3\0\3\11\1\233\20\11\54\0\1\234\16\0\15\154"+
    "\1\212\4\154\1\4\45\154\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\11\11\1\235\12\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\20\11\1\236\3\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\12\11\1\237\11\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\16\11\1\240\5\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\20\11\1\241\3\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\20\11\1\242\3\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\16\11\1\243\5\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\5\11\1\244\16\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\20\11\1\245\3\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\4\11\1\246\17\11\3\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\10\11\1\247\13\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\6\11\1\250\15\11\57\0\1\251\13\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\4\11\1\252"+
    "\17\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\13\11\1\253\10\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\5\11\1\254"+
    "\16\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\13\11\1\255\10\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\3\11\1\256"+
    "\20\11\3\0\1\11\7\0\1\11\12\0\2\11\4\0"+
    "\5\11\3\0\2\11\1\257\21\11\3\0\1\11\7\0"+
    "\1\11\12\0\2\11\4\0\5\11\3\0\13\11\1\260"+
    "\10\11\50\0\1\261\22\0\1\11\7\0\1\11\12\0"+
    "\2\11\4\0\5\11\3\0\4\11\1\262\17\11\3\0"+
    "\1\11\7\0\1\11\12\0\2\11\4\0\5\11\3\0"+
    "\3\11\1\263\20\11\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\1\0\3\1\2\11\2\1"+
    "\1\11\1\1\1\11\3\1\1\11\5\1\2\11\15\1"+
    "\2\11\1\1\2\11\6\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\1\1\11\1\0\3\11\25\1\5\11"+
    "\1\1\1\11\2\1\1\0\7\1\4\0\32\1\1\0"+
    "\1\11\1\0\21\1\1\0\14\1\1\0\7\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private final List<Symbol> symbols;
    private ComplexSymbolFactory symbolFactory;
    private Character caracterRead;
    StringBuffer string = new StringBuffer();
    Symbol stringSymbol;

    public Lexer(java.io.Reader in, ComplexSymbolFactory symbolFactory){
	this(in);
	this.symbolFactory = symbolFactory;
    }

    public void executar() throws IOException {
        while(next_token() != null) continue;
    }
    
    public List<Symbol> getSymbols() {
        return this.symbols;
    }

    private void addSymbol(Symbol symbol) {
        this.symbols.add(symbol);
    }

    private Symbol symbol(int sym, String name) {
        return symbol(name, sym, yytext());
    }

    private Symbol symbol(String name, int sym) {
        Symbol symbol = symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,((int)yychar)), new Location(yyline+1,yycolumn+yylength(),((int)yychar)+yylength()));
        addSymbol(symbol);
        return symbol;
    }

    private Symbol symbol(String name, int sym, Object val) {
        Location left = new Location(yyline+1,yycolumn+1,((int)yychar));
        Location right = new Location(yyline+1,yycolumn+yylength(), ((int)yychar)+yylength());
        Symbol symbol = symbolFactory.newSymbol(name, sym, left, right,val);
        addSymbol(symbol);
        return symbol;
    }

    private Symbol symbol(String name, int sym, Object val,int buflength) {
        Location left = new Location(yyline+1,yycolumn+yylength()-buflength,((int)yychar)+yylength()-buflength);
        Location right = new Location(yyline+1,yycolumn+yylength(), ((int)yychar)+yylength());
        Symbol symbol = symbolFactory.newSymbol(name, sym, left, right,val);
        addSymbol(symbol);
        return symbol;
    }
    
    private Symbol symbolEOF(String name, int sym){
        Symbol symbol = symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,((int)yychar)), new Location(yyline+1,yycolumn+yylength(),((int)yychar)+yylength()));
        return symbol;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      this.symbols = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbolEOF("EOF", sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 72: break;
          case 2:
            { return symbol(sym.NOT, "NOT");
            }
            // fall through
          case 73: break;
          case 3:
            { string.setLength(0); stringSymbol = symbol("STRING", sym.STRING); yybegin(STRING);
            }
            // fall through
          case 74: break;
          case 4:
            { return symbol("ID", sym.ID, yytext());
            }
            // fall through
          case 75: break;
          case 5:
            { return symbol(sym.MOD, "MOD");
            }
            // fall through
          case 76: break;
          case 6:
            { yybegin(CHAR);
            }
            // fall through
          case 77: break;
          case 7:
            { return symbol(sym.LPAREN, "LPAREN");
            }
            // fall through
          case 78: break;
          case 8:
            { return symbol(sym.RPAREN, "RPAREN");
            }
            // fall through
          case 79: break;
          case 9:
            { return symbol(sym.MULT, "MULT");
            }
            // fall through
          case 80: break;
          case 10:
            { return symbol(sym.PLUS, "PLUS");
            }
            // fall through
          case 81: break;
          case 11:
            { return symbol(sym.COMMA, "COMMA");
            }
            // fall through
          case 82: break;
          case 12:
            { return symbol(sym.MINUS, "MINUS");
            }
            // fall through
          case 83: break;
          case 13:
            { return symbol(sym.DOT, "DOT");
            }
            // fall through
          case 84: break;
          case 14:
            { return symbol(sym.DIV, "DIV");
            }
            // fall through
          case 85: break;
          case 15:
            { return symbol(sym.NUM_INT, "NUM_INT");
            }
            // fall through
          case 86: break;
          case 16:
            { return symbol(sym.SEMICOLON, "SEMICOLON");
            }
            // fall through
          case 87: break;
          case 17:
            { return symbol(sym.LT, "LT");
            }
            // fall through
          case 88: break;
          case 18:
            { return symbol(sym.EQ, "EQ");
            }
            // fall through
          case 89: break;
          case 19:
            { return symbol(sym.GT, "GT");
            }
            // fall through
          case 90: break;
          case 20:
            { return symbol(sym.LBRACK, "LBRACK");
            }
            // fall through
          case 91: break;
          case 21:
            { return symbol(sym.RBRACK, "RBRACK");
            }
            // fall through
          case 92: break;
          case 22:
            { return symbol(sym.LBRACE, "LBRACE");
            }
            // fall through
          case 93: break;
          case 23:
            { return symbol(sym.RBRACE, "RBRACE");
            }
            // fall through
          case 94: break;
          case 24:
            { string.append( yytext() );
            }
            // fall through
          case 95: break;
          case 25:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 96: break;
          case 26:
            { yybegin(YYINITIAL); 
                                        stringSymbol.value = string.toString();
                                        return stringSymbol;
            }
            // fall through
          case 97: break;
          case 27:
            { return symbol(sym.NOTEQ, "NOTEQ");
            }
            // fall through
          case 98: break;
          case 28:
            { return symbol(sym.MODEQ, "MODEQ");
            }
            // fall through
          case 99: break;
          case 29:
            { return symbol(sym.MULTEQ, "MULTEQ");
            }
            // fall through
          case 100: break;
          case 30:
            { return symbol(sym.PLUSEQ, "PLUSEQ");
            }
            // fall through
          case 101: break;
          case 31:
            { return symbol(sym.MINUSEQ, "MINUSEQ");
            }
            // fall through
          case 102: break;
          case 32:
            { return symbol(sym.DIVEQ, "DIVEQ");
            }
            // fall through
          case 103: break;
          case 33:
            { return symbol(sym.LTEQ, "LTEQ");
            }
            // fall through
          case 104: break;
          case 34:
            { return symbol(sym.EQEQ, "EQEQ");
            }
            // fall through
          case 105: break;
          case 35:
            { return symbol(sym.GTEQ, "GTEQ");
            }
            // fall through
          case 106: break;
          case 36:
            { return symbol(sym.OR, "OR");
            }
            // fall through
          case 107: break;
          case 37:
            { return symbol(sym.IF, "IF");
            }
            // fall through
          case 108: break;
          case 38:
            { string.append('\"');
            }
            // fall through
          case 109: break;
          case 39:
            { string.append('\\');
            }
            // fall through
          case 110: break;
          case 40:
            { string.append('\n');
            }
            // fall through
          case 111: break;
          case 41:
            { string.append('\r');
            }
            // fall through
          case 112: break;
          case 42:
            { string.append('\t');
            }
            // fall through
          case 113: break;
          case 43:
            { yybegin(YYINITIAL); 
                                        return symbol("CARACTERE", sym.CHAR, " " + yytext().charAt(0));
            }
            // fall through
          case 114: break;
          case 44:
            { return symbol(sym.NUM_FLOAT, "NUM_FLOAT");
            }
            // fall through
          case 115: break;
          case 45:
            { return symbol(sym.AND, "AND");
            }
            // fall through
          case 116: break;
          case 46:
            { return symbol(sym.INT, "INT");
            }
            // fall through
          case 117: break;
          case 47:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\"'; 
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 118: break;
          case 48:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\''; 
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 119: break;
          case 49:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\\'; 
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 120: break;
          case 50:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\n'; 
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 121: break;
          case 51:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\r'; 
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 122: break;
          case 52:
            { yybegin(YYINITIAL); 
                                        caracterRead = '\t';
                                        return symbol("CARACTERE", sym.CHAR, caracterRead.toString());
            }
            // fall through
          case 123: break;
          case 53:
            { return symbol(sym.CRLF, "CRLF");
            }
            // fall through
          case 124: break;
          case 54:
            { return symbol(sym.AUTO, "AUTO");
            }
            // fall through
          case 125: break;
          case 55:
            { return symbol(sym.CHAR, "CHAR");
            }
            // fall through
          case 126: break;
          case 56:
            { return symbol(sym.ELSE, "ELSE");
            }
            // fall through
          case 127: break;
          case 57:
            { return symbol(sym.LONG, "LONG");
            }
            // fall through
          case 128: break;
          case 58:
            { return symbol(sym.VOID, "VOID");
            }
            // fall through
          case 129: break;
          case 59:
            { return symbol(sym.BREAK, "BREAK");
            }
            // fall through
          case 130: break;
          case 60:
            { return symbol(sym.CONST, "CONST");
            }
            // fall through
          case 131: break;
          case 61:
            { return symbol(sym.FLOAT, "FLOAT");
            }
            // fall through
          case 132: break;
          case 62:
            { return symbol(sym.SCANF, "SCANF");
            }
            // fall through
          case 133: break;
          case 63:
            { return symbol(sym.SHORT, "SHORT");
            }
            // fall through
          case 134: break;
          case 64:
            { return symbol(sym.DOUBLE, "DOUBLE");
            }
            // fall through
          case 135: break;
          case 65:
            { return symbol(sym.EXTERN, "EXTERN");
            }
            // fall through
          case 136: break;
          case 66:
            { return symbol(sym.PRINTF, "PRINTF");
            }
            // fall through
          case 137: break;
          case 67:
            { return symbol(sym.RETURN, "RETURN");
            }
            // fall through
          case 138: break;
          case 68:
            { return symbol(sym.SIGNED, "SIGNED");
            }
            // fall through
          case 139: break;
          case 69:
            { return symbol(sym.STATIC, "STATIC");
            }
            // fall through
          case 140: break;
          case 70:
            { return symbol(sym.DEFINE, "DEFINE");
            }
            // fall through
          case 141: break;
          case 71:
            { return symbol(sym.UNSIGNED, "UNSIGNED");
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
