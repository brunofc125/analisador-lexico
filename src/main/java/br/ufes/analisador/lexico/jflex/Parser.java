
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package br.ufes.analisador.lexico.jflex;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import br.ufes.analisador.lexico.jflex.Lexer;
import br.ufes.analisador.lexico.analisador.ErroAnalisado;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\002\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\004\000\002\006\007\000\002\006\007\000" +
    "\002\006\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\004\000\002\011\003\000\002\011\002\000\002\012" +
    "\004\000\002\013\005\000\002\014\005\000\002\014\002" +
    "\000\002\015\004\000\002\015\002\000\002\016\005\000" +
    "\002\017\002\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\007\000\002\020\007\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\006" +
    "\000\002\020\007\000\002\021\011\000\002\021\015\000" +
    "\002\021\013\000\002\022\003\000\002\022\006\000\002" +
    "\022\005\000\002\022\002\000\002\023\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\004\000" +
    "\002\026\004\000\002\026\002\000\002\027\004\000\002" +
    "\027\002\000\002\030\005\000\002\030\002\000\002\031" +
    "\004\000\002\032\005\000\002\032\002\000\002\033\004" +
    "\000\002\034\005\000\002\034\005\000\002\034\002\000" +
    "\002\035\004\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\002\000\002\037" +
    "\004\000\002\040\005\000\002\040\005\000\002\040\002" +
    "\000\002\041\004\000\002\042\005\000\002\042\005\000" +
    "\002\042\002\000\002\043\004\000\002\043\004\000\002" +
    "\043\003\000\002\044\005\000\002\044\003\000\002\045" +
    "\004\000\002\045\003\000\002\045\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\002\000\002\050\003\000" +
    "\002\050\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\040\002\ufffe\004\010\005\007\006\011\007" +
    "\004\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\064\012\001\002\000\024\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\001\002\000\024\010\023\011\032\012" +
    "\031\013\025\014\027\015\026\016\021\017\033\020\022" +
    "\001\002\000\004\002\020\001\002\000\024\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\001\002\000\024\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\001\002" +
    "\000\024\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\001\002\000\004\065\013" +
    "\001\002\000\006\066\015\067\016\001\002\000\040\002" +
    "\ufffe\004\010\005\007\006\011\007\004\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\064\012\001\002\000\100\002\uff9b\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\030\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\064\uff9b\001\002\000\100\002\uff9c\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\030\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\064\uff9c\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\004\065\ufff0\001\002\000" +
    "\004\065\uffef\001\002\000\004\065\ufff8\001\002\000\004" +
    "\065\ufff2\001\002\000\004\065\ufff5\001\002\000\010\016" +
    "\021\017\033\020\022\001\002\000\010\016\021\017\033" +
    "\020\022\001\002\000\004\065\034\001\002\000\004\065" +
    "\ufff6\001\002\000\004\065\ufff7\001\002\000\004\065\ufff1" +
    "\001\002\000\012\027\041\033\037\035\036\036\035\001" +
    "\002\000\004\065\271\001\002\000\040\002\ufffe\004\010" +
    "\005\007\006\011\007\004\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\064\012" +
    "\001\002\000\006\066\015\067\016\001\002\000\004\002" +
    "\000\001\002\000\026\010\023\011\032\012\031\013\025" +
    "\014\027\015\026\016\021\017\033\020\022\030\uffe6\001" +
    "\002\000\004\030\056\001\002\000\006\030\uffe0\036\053" +
    "\001\002\000\004\030\uffe7\001\002\000\004\065\046\001" +
    "\002\000\010\030\uffe2\033\050\036\uffe2\001\002\000\006" +
    "\030\uffe4\036\uffe4\001\002\000\006\066\015\067\016\001" +
    "\002\000\004\034\052\001\002\000\010\030\uffe3\035\uffe3" +
    "\036\uffe3\001\002\000\024\010\023\011\032\012\031\013" +
    "\025\014\027\015\026\016\021\017\033\020\022\001\002" +
    "\000\004\030\uffe5\001\002\000\004\030\uffe1\001\002\000" +
    "\004\031\057\001\002\000\054\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\032\uffde\035\uffde\065\uffde\001\002\000" +
    "\040\002\ufffe\004\010\005\007\006\011\007\004\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\064\012\001\002\000\004\002\uffec\001\002" +
    "\000\054\004\010\005\007\006\011\007\004\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\072\022\063\023\065\024\075\025\067\032" +
    "\073\035\071\065\070\001\002\000\004\027\260\001\002" +
    "\000\054\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\032" +
    "\uffd7\035\uffd7\065\uffd7\001\002\000\004\027\254\001\002" +
    "\000\024\010\023\011\032\012\031\013\025\014\027\015" +
    "\026\016\021\017\033\020\022\001\002\000\004\027\234" +
    "\001\002\000\024\027\222\033\220\035\uffcd\040\215\057" +
    "\214\060\217\061\212\062\213\063\223\001\002\000\054" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\032\uffd6\035" +
    "\uffd6\065\uffd6\001\002\000\022\011\102\027\105\052\101" +
    "\053\111\065\106\066\015\067\016\071\107\001\002\000" +
    "\040\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\064\uffdf\001\002\000\054\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\032\uffdd\035\uffdd\065\uffdd\001" +
    "\002\000\004\035\076\001\002\000\054\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\032\uffd8\035\uffd8\065\uffd8\001" +
    "\002\000\016\030\uffbc\034\uffbc\035\uffbc\036\uffbc\050\206" +
    "\051\uffbc\001\002\000\004\035\205\001\002\000\016\011" +
    "\102\027\105\065\106\066\015\067\016\071\107\001\002" +
    "\000\042\030\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\001\002\000\032\030" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\041\171\042\170\044\uffb2" +
    "\045\173\046\172\047\uffb2\050\uffb2\051\uffb2\001\002\000" +
    "\042\030\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\001\002\000\022\011\102" +
    "\027\105\052\101\053\111\065\106\066\015\067\016\071" +
    "\107\001\002\000\046\027\154\030\uff9f\033\153\034\uff9f" +
    "\035\uff9f\036\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\001\002\000\042\030\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\001" +
    "\002\000\014\030\uffbf\034\uffbf\035\uffbf\036\uffbf\051\147" +
    "\001\002\000\016\011\102\027\105\065\106\066\015\067" +
    "\016\071\107\001\002\000\042\030\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\001\002\000\036\030\uffae\034\uffae\035\uffae\036\uffae\041" +
    "\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\137\053\140\001\002\000\042\030\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\001\002\000\042\030\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\041\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\001\002\000\042\030\uffaa\034\uffaa\035\uffaa\036\uffaa\041" +
    "\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\127\055\131\001\002\000" +
    "\022\030\uffb8\034\uffb8\035\uffb8\036\uffb8\044\122\047\120" +
    "\050\uffb8\051\uffb8\001\002\000\022\011\102\027\105\052" +
    "\101\053\111\065\106\066\015\067\016\071\107\001\002" +
    "\000\016\030\uffbb\034\uffbb\035\uffbb\036\uffbb\050\uffbb\051" +
    "\uffbb\001\002\000\022\011\102\027\105\052\101\053\111" +
    "\065\106\066\015\067\016\071\107\001\002\000\022\030" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\044\122\047\120\050\uffb8" +
    "\051\uffb8\001\002\000\016\030\uffba\034\uffba\035\uffba\036" +
    "\uffba\050\uffba\051\uffba\001\002\000\022\030\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\044\122\047\120\050\uffb8\051\uffb8\001" +
    "\002\000\016\030\uffb9\034\uffb9\035\uffb9\036\uffb9\050\uffb9" +
    "\051\uffb9\001\002\000\022\011\102\027\105\052\101\053" +
    "\111\065\106\066\015\067\016\071\107\001\002\000\036" +
    "\030\uffad\034\uffad\035\uffad\036\uffad\041\uffad\042\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\001\002\000\022\011\102\027\105\052\101\053" +
    "\111\065\106\066\015\067\016\071\107\001\002\000\042" +
    "\030\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\127\055\131\001\002\000\036\030\uffab\034" +
    "\uffab\035\uffab\036\uffab\041\uffab\042\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\001" +
    "\002\000\042\030\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa" +
    "\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\127\055\131\001\002\000\036" +
    "\030\uffac\034\uffac\035\uffac\036\uffac\041\uffac\042\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\001\002\000\032\030\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\001\002\000\022\011\102\027\105\052" +
    "\101\053\111\065\106\066\015\067\016\071\107\001\002" +
    "\000\022\011\102\027\105\052\101\053\111\065\106\066" +
    "\015\067\016\071\107\001\002\000\036\030\uffae\034\uffae" +
    "\035\uffae\036\uffae\041\uffae\042\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\137\053\140\001\002" +
    "\000\032\030\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\001\002\000\036\030\uffae\034\uffae\035\uffae\036\uffae\041" +
    "\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\137\053\140\001\002\000\032\030\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\001\002\000\042\030" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\001\002\000\012\030\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\001\002\000\022\011\102\027\105\052" +
    "\101\053\111\065\106\066\015\067\016\071\107\001\002" +
    "\000\014\030\uffbf\034\uffbf\035\uffbf\036\uffbf\051\147\001" +
    "\002\000\012\030\uffc0\034\uffc0\035\uffc0\036\uffc0\001\002" +
    "\000\042\030\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\042" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\014\011" +
    "\102\065\106\066\015\067\016\071\107\001\002\000\024" +
    "\011\102\027\105\030\uffc3\052\101\053\111\065\106\066" +
    "\015\067\016\071\107\001\002\000\006\030\uffc1\036\160" +
    "\001\002\000\004\030\157\001\002\000\042\030\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\001\002\000\024\011\102\027\105\030\uffc3" +
    "\052\101\053\111\065\106\066\015\067\016\071\107\001" +
    "\002\000\004\030\uffc4\001\002\000\004\030\uffc2\001\002" +
    "\000\004\034\164\001\002\000\042\030\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\001\002\000\004\030\166\001\002\000\042\030\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\001\002\000\022\030\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\001\002" +
    "\000\022\011\102\027\105\052\101\053\111\065\106\066" +
    "\015\067\016\071\107\001\002\000\022\011\102\027\105" +
    "\052\101\053\111\065\106\066\015\067\016\071\107\001" +
    "\002\000\022\011\102\027\105\052\101\053\111\065\106" +
    "\066\015\067\016\071\107\001\002\000\022\011\102\027" +
    "\105\052\101\053\111\065\106\066\015\067\016\071\107" +
    "\001\002\000\032\030\uffb2\034\uffb2\035\uffb2\036\uffb2\041" +
    "\171\042\170\044\uffb2\045\173\046\172\047\uffb2\050\uffb2" +
    "\051\uffb2\001\002\000\022\030\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\032" +
    "\030\uffb2\034\uffb2\035\uffb2\036\uffb2\041\171\042\170\044" +
    "\uffb2\045\173\046\172\047\uffb2\050\uffb2\051\uffb2\001\002" +
    "\000\022\030\uffb3\034\uffb3\035\uffb3\036\uffb3\044\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\001\002\000\032\030\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\041\171\042\170\044\uffb2\045\173\046" +
    "\172\047\uffb2\050\uffb2\051\uffb2\001\002\000\022\030\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\044\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\032\030\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\041\171\042\170\044\uffb2\045\173\046\172\047\uffb2\050" +
    "\uffb2\051\uffb2\001\002\000\022\030\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002\000" +
    "\042\030\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\001\002\000\054\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\032\uffdb\035\uffdb\065" +
    "\uffdb\001\002\000\022\011\102\027\105\052\101\053\111" +
    "\065\106\066\015\067\016\071\107\001\002\000\014\030" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\051\uffbe\001\002\000\016" +
    "\030\uffbc\034\uffbc\035\uffbc\036\uffbc\050\206\051\uffbc\001" +
    "\002\000\014\030\uffbd\034\uffbd\035\uffbd\036\uffbd\051\uffbd" +
    "\001\002\000\022\011\uffca\027\uffca\052\uffca\053\uffca\065" +
    "\uffca\066\uffca\067\uffca\071\uffca\001\002\000\022\011\uffc9" +
    "\027\uffc9\052\uffc9\053\uffc9\065\uffc9\066\uffc9\067\uffc9\071" +
    "\uffc9\001\002\000\022\011\uffc7\027\uffc7\052\uffc7\053\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\071\uffc7\001\002\000\022\011" +
    "\uffcb\027\uffcb\052\uffcb\053\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\071\uffcb\001\002\000\004\035\233\001\002\000\022\011" +
    "\uffc6\027\uffc6\052\uffc6\053\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\071\uffc6\001\002\000\022\011\102\027\105\052\101\053" +
    "\111\065\106\066\015\067\016\071\107\001\002\000\004" +
    "\035\uffd0\001\002\000\024\011\102\027\105\030\uffc3\052" +
    "\101\053\111\065\106\066\015\067\016\071\107\001\002" +
    "\000\022\011\uffc8\027\uffc8\052\uffc8\053\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\071\uffc8\001\002\000\022\011\102\027\105" +
    "\052\101\053\111\065\106\066\015\067\016\071\107\001" +
    "\002\000\004\035\uffcc\001\002\000\004\030\227\001\002" +
    "\000\004\035\uffce\001\002\000\004\034\231\001\002\000" +
    "\016\040\215\057\214\060\217\061\212\062\213\063\223" +
    "\001\002\000\004\035\uffcf\001\002\000\054\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\032\uffdc\035\uffdc\065\uffdc" +
    "\001\002\000\022\011\102\027\105\052\101\053\111\065" +
    "\106\066\015\067\016\071\107\001\002\000\004\030\236" +
    "\001\002\000\004\031\237\001\002\000\054\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\032\uffde\035\uffde\065\uffde" +
    "\001\002\000\054\004\010\005\007\006\011\007\004\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\072\022\063\023\065\024\075\025" +
    "\067\032\241\035\071\065\070\001\002\000\056\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\242\032\uffd3\035" +
    "\uffd3\065\uffd3\001\002\000\006\025\067\031\243\001\002" +
    "\000\054\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\032" +
    "\uffde\035\uffde\065\uffde\001\002\000\054\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\032\uffd1\035\uffd1\065\uffd1\001" +
    "\002\000\054\004\010\005\007\006\011\007\004\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\072\022\063\023\065\024\075\025\067" +
    "\032\246\035\071\065\070\001\002\000\054\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\032\uffd2\035\uffd2\065\uffd2" +
    "\001\002\000\004\065\250\001\002\000\020\035\251\040" +
    "\215\057\214\060\217\061\212\062\213\063\223\001\002" +
    "\000\054\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\032" +
    "\uffd5\035\uffd5\065\uffd5\001\002\000\004\035\253\001\002" +
    "\000\054\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\032" +
    "\uffd4\035\uffd4\065\uffd4\001\002\000\004\065\255\001\002" +
    "\000\004\030\256\001\002\000\004\035\257\001\002\000" +
    "\054\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032\uffd9" +
    "\035\uffd9\065\uffd9\001\002\000\022\011\102\027\105\052" +
    "\101\053\111\065\106\066\015\067\016\071\107\001\002" +
    "\000\004\030\262\001\002\000\004\035\263\001\002\000" +
    "\054\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\032\uffda" +
    "\035\uffda\065\uffda\001\002\000\004\034\265\001\002\000" +
    "\004\035\266\001\002\000\040\002\ufffe\004\010\005\007" +
    "\006\011\007\004\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\064\012\001\002" +
    "\000\004\002\uffed\001\002\000\004\002\uffee\001\002\000" +
    "\010\033\050\035\uffe2\036\uffe2\001\002\000\040\002\ufffe" +
    "\004\010\005\007\006\011\007\004\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\064\012\001\002\000\004\002\uffeb\001\002\000\006\035" +
    "\276\036\275\001\002\000\004\065\271\001\002\000\040" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\064\uffe9\001\002\000\040\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\064\uffea\001" +
    "\002\000\040\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\064\uffe8\001\002\000\004\065\ufff4" +
    "\001\002\000\004\065\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\006\004\027\005\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\013\001\001\000\006\002\016" +
    "\003\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\301\001\001\000\004\005\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\037\001\001\000\004\007\271" +
    "\001\001\000\006\002\267\003\004\001\001\000\004\047" +
    "\263\001\001\000\002\001\001\000\014\004\044\005\023" +
    "\011\041\012\043\013\042\001\001\000\002\001\001\000" +
    "\004\015\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\046\001\001\000\002\001\001\000\004\047" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\044\005\023\012\054\013\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\057\001\001\000\004" +
    "\017\061\001\001\000\006\002\060\003\004\001\001\000" +
    "\002\001\001\000\010\003\065\020\073\021\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\246\005\023\001\001\000\002\001\001\000\010" +
    "\022\215\023\220\024\223\001\001\000\002\001\001\000" +
    "\030\025\077\031\107\033\076\035\116\037\102\041\112" +
    "\043\115\044\114\045\111\047\103\050\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\206\001\001\000\002\001\001\000" +
    "\012\044\203\045\111\047\103\050\113\001\001\000\002" +
    "\001\001\000\004\036\166\001\001\000\002\001\001\000" +
    "\030\025\164\031\107\033\076\035\116\037\102\041\112" +
    "\043\115\044\114\045\111\047\103\050\113\001\001\000" +
    "\004\046\151\001\001\000\002\001\001\000\004\030\145" +
    "\001\001\000\012\044\144\045\111\047\103\050\113\001" +
    "\001\000\002\001\001\000\004\040\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\127\001\001\000" +
    "\004\034\120\001\001\000\022\035\124\037\102\041\112" +
    "\043\115\044\114\045\111\047\103\050\113\001\001\000" +
    "\002\001\001\000\022\035\122\037\102\041\112\043\115" +
    "\044\114\045\111\047\103\050\113\001\001\000\004\034" +
    "\123\001\001\000\002\001\001\000\004\034\125\001\001" +
    "\000\002\001\001\000\014\043\133\044\114\045\111\047" +
    "\103\050\113\001\001\000\002\001\001\000\014\043\131" +
    "\044\114\045\111\047\103\050\113\001\001\000\004\042" +
    "\132\001\001\000\002\001\001\000\004\042\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\041\142\043" +
    "\115\044\114\045\111\047\103\050\113\001\001\000\016" +
    "\041\140\043\115\044\114\045\111\047\103\050\113\001" +
    "\001\000\004\040\141\001\001\000\002\001\001\000\004" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\147\033\076\035\116\037\102" +
    "\041\112\043\115\044\114\045\111\047\103\050\113\001" +
    "\001\000\004\030\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\162\047\103\050\113\001\001\000" +
    "\032\025\154\026\155\031\107\033\076\035\116\037\102" +
    "\041\112\043\115\044\114\045\111\047\103\050\113\001" +
    "\001\000\004\027\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\154\026\161\031\107\033\076\035" +
    "\116\037\102\041\112\043\115\044\114\045\111\047\103" +
    "\050\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\037\201\041\112\043" +
    "\115\044\114\045\111\047\103\050\113\001\001\000\020" +
    "\037\177\041\112\043\115\044\114\045\111\047\103\050" +
    "\113\001\001\000\020\037\175\041\112\043\115\044\114" +
    "\045\111\047\103\050\113\001\001\000\020\037\173\041" +
    "\112\043\115\044\114\045\111\047\103\050\113\001\001" +
    "\000\004\036\174\001\001\000\002\001\001\000\004\036" +
    "\176\001\001\000\002\001\001\000\004\036\200\001\001" +
    "\000\002\001\001\000\004\036\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\207" +
    "\035\116\037\102\041\112\043\115\044\114\045\111\047" +
    "\103\050\113\001\001\000\002\001\001\000\004\032\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\025\227\031\107\033\076\035" +
    "\116\037\102\041\112\043\115\044\114\045\111\047\103" +
    "\050\113\001\001\000\002\001\001\000\032\025\154\026" +
    "\225\031\107\033\076\035\116\037\102\041\112\043\115" +
    "\044\114\045\111\047\103\050\113\001\001\000\002\001" +
    "\001\000\030\025\224\031\107\033\076\035\116\037\102" +
    "\041\112\043\115\044\114\045\111\047\103\050\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\231\024\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\234\031\107" +
    "\033\076\035\116\037\102\041\112\043\115\044\114\045" +
    "\111\047\103\050\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\237\001\001\000\010\003\065\020" +
    "\073\021\063\001\001\000\002\001\001\000\004\021\243" +
    "\001\001\000\004\017\244\001\001\000\002\001\001\000" +
    "\010\003\065\020\073\021\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\251\024\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\025\260\031\107\033\076\035\116\037\102" +
    "\041\112\043\115\044\114\045\111\047\103\050\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\266\003" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\273\001\001\000\006\002\272\003\004\001\001\000" +
    "\002\001\001\000\004\010\276\001\001\000\004\007\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return this.getScanner().next_token();

    }



    private ArrayList<ErroAnalisado> errosSintaticos;
    private Map<String, String> mapTokens;

    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
        errosSintaticos = new ArrayList<>();
        this.mapTokens = new HashMap<>();
        this.mapTokens.put("DEFINE", "#define");
        this.mapTokens.put("AUTO", "auto");
        this.mapTokens.put("STATIC", "static");
        this.mapTokens.put("EXTERN", "extern");
        this.mapTokens.put("CONST", "const");
        this.mapTokens.put("VOID", "void");
        this.mapTokens.put("CHAR", "char");
        this.mapTokens.put("FLOAT", "float");
        this.mapTokens.put("DOUBLE", "double");
        this.mapTokens.put("SIGNED", "signed");
        this.mapTokens.put("UNSIGNED", "unsigned");
        this.mapTokens.put("INT", "int");
        this.mapTokens.put("SHORT", "short");
        this.mapTokens.put("LONG", "long");
        this.mapTokens.put("RETURN", "return");
        this.mapTokens.put("PRINTF", "printf");
        this.mapTokens.put("SCANF", "scanf");
        this.mapTokens.put("BREAK", "break");
        this.mapTokens.put("IF", "if");
        this.mapTokens.put("ELSE", "else");
        this.mapTokens.put("LPAREN", "(");
        this.mapTokens.put("RPAREN", ")");
        this.mapTokens.put("LBRACE", "{");
        this.mapTokens.put("RBRACE", "}");
        this.mapTokens.put("LBRACK", "[");
        this.mapTokens.put("RBRACK", "]");
        this.mapTokens.put("SEMICOLON", ";");
        this.mapTokens.put("COMMA", ",");
        this.mapTokens.put("DOT", ".");
        this.mapTokens.put("CRLF", "\\n");
        this.mapTokens.put("EQ", "=");
        this.mapTokens.put("GT", ">");
        this.mapTokens.put("LT", "<");
        this.mapTokens.put("NOT", "!");
        this.mapTokens.put("EQEQ", "==");
        this.mapTokens.put("LTEQ", "<=");
        this.mapTokens.put("GTEQ", ">=");
        this.mapTokens.put("NOTEQ", "!=");
        this.mapTokens.put("AND", "AND");
        this.mapTokens.put("OR", "OR");
        this.mapTokens.put("PLUS", "+");
        this.mapTokens.put("MINUS", "-");
        this.mapTokens.put("MULT", "*");
        this.mapTokens.put("DIV", "/");
        this.mapTokens.put("MOD", "%");
        this.mapTokens.put("PLUSEQ", "+=");
        this.mapTokens.put("MINUSEQ", "-=");
        this.mapTokens.put("MULTEQ", "*=");
        this.mapTokens.put("DIVEQ", "/=");
        this.mapTokens.put("MODEQ", "%=");
        this.mapTokens.put("EOF", "Final do Arquivo");
        this.mapTokens.put("error", "Erro");
        this.mapTokens.put("NUM_FLOAT", "Número real");
        this.mapTokens.put("NUM_INT", "Número inteiro");
        this.mapTokens.put("STRING", "Texto");
        this.mapTokens.put("ID", "Identificador");
    }

    public ArrayList<ErroAnalisado> getErros() {
        return errosSintaticos;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        ComplexSymbol symbol = (ComplexSymbol) cur_token;
        
        List<Integer> expected_tokens_ids = this.expected_token_ids();
        int i = 0;
        while(this.expected_token_ids().isEmpty()) {
            expected_tokens_ids = this.expected_token_ids();
            if(i == 1000) {
                break;
            }
            i++;
        }
        
        Iterator<Integer> it = expected_tokens_ids.iterator();
        int tokenId = it.next();
        
        String error = "ERRO SINTÁTICO >>> Linha "
                        + symbol.getLeft().getLine()
                        + ", coluna "
                        + symbol.getLeft().getColumn()
                        + ": esperado [\"" + this.mapTokens.getOrDefault(sym.terminalNames[tokenId], "Token não identificado");
        
        while(it.hasNext()) {
            tokenId = it.next();
            error += "\", \"" + this.mapTokens.getOrDefault(sym.terminalNames[tokenId], "Token não identificado");
        }

        error += "\"], encontrado [\"" + (symbol.value != null ? symbol.value : "vazio") + "\"].";

        this.report_error(error, symbol);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        super.report_fatal_error("Análise interrompida.", info);
    }

    @Override
    public void report_error(String message, Object info) {
        this.errosSintaticos.add(new ErroAnalisado(message, (Symbol) info));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= especificador tipo ID programa2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= DEFINE ID num programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // especificador ::= AUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // especificador ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // especificador ::= EXTERN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // especificador ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificador ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= SIGNED inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= UNSIGNED inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inteiro ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inteiro",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inteiro ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inteiro",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inteiro ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inteiro",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programa2 ::= SEMICOLON programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programa2 ::= LBRACK num RBRACK SEMICOLON programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programa2 ::= LPAREN listaParametros RPAREN bloco programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programa2 ::= COMMA listaID programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaID ::= ID declaracaoParam2 listaIDTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaIDTail ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaIDTail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaIDTail ::= COMMA listaID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaIDTail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaParametros ::= listaParamRestante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaParametros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaParametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaParametros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParamRestante ::= declaracaoParam declParamRestante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaParamRestante",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracaoParam ::= tipo ID declaracaoParam2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracaoParam2 ::= LBRACK num RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoParam2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracaoParam2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracaoParam2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declParamRestante ::= COMMA listaParamRestante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declParamRestante",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declParamRestante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declParamRestante",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloco ::= LBRACE conjuntoInst RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjuntoInst ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjuntoInst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuntoInst ::= conjuntoInst instrucoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjuntoInst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucoes ::= ID expressao SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucoes ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrucoes ::= PRINTF LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instrucoes ::= SCANF LPAREN ID RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrucoes ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instrucoes ::= instrucoesIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instrucoes ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrucoes ::= especificador tipo ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instrucoes ::= especificador tipo ID atribuicao SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoes",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucoesIf ::= IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoesIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucoesIf ::= IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE ELSE LBRACE conjuntoInst RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoesIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucoesIf ::= IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE ELSE instrucoesIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucoesIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= LBRACK expr RBRACK atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= LPAREN exprList RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atribuicao ::= operadorAtrib expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadorAtrib ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadorAtrib ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadorAtrib ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorAtrib ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorAtrib ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorAtrib ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAtrib",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= exprAnd exprOr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprList ::= expr exprListTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprListTail ::= COMMA exprList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListTail",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprListTail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListTail",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprOr ::= OR exprAnd exprOr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprOr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprAnd ::= exprEqual exprAnd2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprAnd",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprAnd2 ::= AND exprEqual exprAnd2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprAnd2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprAnd2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprAnd2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprEqual ::= exprRelational exprEqual2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprEqual",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprEqual2 ::= EQEQ exprRelational exprEqual2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprEqual2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exprEqual2 ::= NOTEQ exprRelational exprEqual2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprEqual2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprEqual2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprEqual2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprRelational ::= exprPlus exprRelational2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprRelational2 ::= LT exprPlus exprRelational2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exprRelational2 ::= LTEQ exprPlus exprRelational2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprRelational2 ::= GT exprPlus exprRelational2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exprRelational2 ::= GTEQ exprPlus exprRelational2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exprRelational2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRelational2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exprPlus ::= exprMult exprPlus2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprPlus",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exprPlus2 ::= PLUS exprMult exprPlus2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprPlus2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exprPlus2 ::= MINUS exprMult exprPlus2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprPlus2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exprPlus2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprPlus2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exprMult ::= exprUnary exprMult2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprMult",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exprMult2 ::= MULT exprUnary exprMult2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprMult2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprMult2 ::= DIV exprUnary exprMult2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprMult2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprMult2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprMult2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprUnary ::= PLUS exprParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUnary",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprUnary ::= MINUS exprParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUnary",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprUnary ::= exprParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUnary",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprParenthesis ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprParenthesis",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprParenthesis ::= primary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprParenthesis",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // primary ::= ID primaryID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primary ::= num 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primary ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primaryID ::= LBRACK primary RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryID",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primaryID ::= LPAREN exprList RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryID",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primaryID ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryID",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // num ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // num ::= NUM_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
