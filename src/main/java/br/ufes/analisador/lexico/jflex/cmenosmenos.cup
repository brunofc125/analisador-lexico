package br.ufes.analisador.lexico.jflex;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import br.ufes.analisador.lexico.jflex.Lexer;
import br.ufes.analisador.lexico.analisador.ErroAnalisado;

parser code {:

    private ArrayList<ErroAnalisado> errosSintaticos;
    private Map<String, String> mapTokens;

    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
        errosSintaticos = new ArrayList<>();
        this.mapTokens = new HashMap<>();
        this.mapTokens.put("DEFINE", "#define");
        this.mapTokens.put("AUTO", "auto");
        this.mapTokens.put("STATIC", "static");
        this.mapTokens.put("EXTERN", "extern");
        this.mapTokens.put("CONST", "const");
        this.mapTokens.put("VOID", "void");
        this.mapTokens.put("CHAR", "char");
        this.mapTokens.put("FLOAT", "float");
        this.mapTokens.put("DOUBLE", "double");
        this.mapTokens.put("SIGNED", "signed");
        this.mapTokens.put("UNSIGNED", "unsigned");
        this.mapTokens.put("INT", "int");
        this.mapTokens.put("SHORT", "short");
        this.mapTokens.put("LONG", "long");
        this.mapTokens.put("RETURN", "return");
        this.mapTokens.put("PRINTF", "printf");
        this.mapTokens.put("SCANF", "scanf");
        this.mapTokens.put("BREAK", "break");
        this.mapTokens.put("IF", "if");
        this.mapTokens.put("ELSE", "else");
        this.mapTokens.put("LPAREN", "(");
        this.mapTokens.put("RPAREN", ")");
        this.mapTokens.put("LBRACE", "{");
        this.mapTokens.put("RBRACE", "}");
        this.mapTokens.put("LBRACK", "[");
        this.mapTokens.put("RBRACK", "]");
        this.mapTokens.put("SEMICOLON", ";");
        this.mapTokens.put("COMMA", ",");
        this.mapTokens.put("DOT", ".");
        this.mapTokens.put("CRLF", "\\n");
        this.mapTokens.put("EQ", "=");
        this.mapTokens.put("GT", ">");
        this.mapTokens.put("LT", "<");
        this.mapTokens.put("NOT", "!");
        this.mapTokens.put("EQEQ", "==");
        this.mapTokens.put("LTEQ", "<=");
        this.mapTokens.put("GTEQ", ">=");
        this.mapTokens.put("NOTEQ", "!=");
        this.mapTokens.put("AND", "AND");
        this.mapTokens.put("OR", "OR");
        this.mapTokens.put("PLUS", "+");
        this.mapTokens.put("MINUS", "-");
        this.mapTokens.put("MULT", "*");
        this.mapTokens.put("DIV", "/");
        this.mapTokens.put("MOD", "%");
        this.mapTokens.put("PLUSEQ", "+=");
        this.mapTokens.put("MINUSEQ", "-=");
        this.mapTokens.put("MULTEQ", "*=");
        this.mapTokens.put("DIVEQ", "/=");
        this.mapTokens.put("MODEQ", "%=");
        this.mapTokens.put("EOF", "Final do Arquivo");
        this.mapTokens.put("error", "Erro");
        this.mapTokens.put("NUM_FLOAT", "Número real");
        this.mapTokens.put("NUM_INT", "Número inteiro");
        this.mapTokens.put("STRING", "Texto");
        this.mapTokens.put("ID", "Identificador");
    }

    public ArrayList<ErroAnalisado> getErros() {
        return errosSintaticos;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        ComplexSymbol symbol = (ComplexSymbol) cur_token;
        
        List<Integer> expected_tokens_ids = this.expected_token_ids();
        int i = 0;
        while(this.expected_token_ids().isEmpty()) {
            expected_tokens_ids = this.expected_token_ids();
            if(i == 1000) {
                break;
            }
            i++;
        }
        
        Iterator<Integer> it = expected_tokens_ids.iterator();
        int tokenId = it.next();
        
        String error = "ERRO SINTÁTICO -> Linha "
                        + symbol.getLeft().getLine()
                        + ", coluna "
                        + symbol.getLeft().getColumn()
                        + ": esperado [\"" + this.mapTokens.getOrDefault(sym.terminalNames[tokenId], "Token não identificado");
        
        while(it.hasNext()) {
            tokenId = it.next();
            error += "\", \"" + this.mapTokens.getOrDefault(sym.terminalNames[tokenId], "Token não identificado");
        }

        error += "\"], encontrado [\"" + symbol.value + "\"].";

        this.report_error(error, symbol);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        super.report_fatal_error("Não foi possível continuar a análise.", info);
    }

    @Override
    public void report_error(String message, Object info) {
        this.errosSintaticos.add(new ErroAnalisado(message, (Symbol) info));
    }

:};

scan with {: 
    return this.getScanner().next_token();
:};

// Terminal
terminal AUTO;
terminal STATIC;
terminal EXTERN;
terminal CONST;
terminal VOID;
terminal CHAR;
terminal FLOAT;
terminal DOUBLE;
terminal SIGNED;
terminal UNSIGNED;
terminal INT;
terminal SHORT;
terminal LONG;
terminal RETURN;
terminal PRINTF;
terminal SCANF;
terminal BREAK;
terminal IF;
terminal ELSE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
terminal EQ;
terminal GT;
terminal LT;
terminal NOT;
terminal EQEQ;
terminal LTEQ;
terminal GTEQ;
terminal NOTEQ;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal MOD;
terminal PLUSEQ;
terminal MINUSEQ;
terminal MULTEQ;
terminal DIVEQ;
terminal MODEQ;
terminal DEFINE;
terminal ID;
terminal NUM_FLOAT;
terminal NUM_INT;
terminal CRLF;
terminal STRING;

// Não terminal
non terminal programa;
non terminal especificador;
non terminal tipo;
non terminal inteiro;
non terminal programa2;
non terminal listaID;
non terminal listaIDTail;
non terminal listaParametros;
non terminal listaParamRestante;
non terminal declaracaoParam;
non terminal declaracaoParam2;
non terminal declParamRestante;
non terminal bloco;
non terminal conjuntoInst;
non terminal instrucoes;
non terminal instrucoesIf;
non terminal expressao;
non terminal atribuicao;
non terminal operadorAtrib;
non terminal expr;
non terminal exprList;
non terminal exprListTail;
non terminal exprOr;
non terminal exprAnd;
non terminal exprAnd2;
non terminal exprEqual;
non terminal exprEqual2;
non terminal exprRelational;
non terminal exprRelational2;
non terminal exprPlus;
non terminal exprPlus2;
non terminal exprMult;
non terminal exprMult2;
non terminal exprUnary;
non terminal exprParenthesis;
non terminal primary;
non terminal primaryID;
non terminal num;
non terminal literal;

start with programa;

// Gramática
programa ::= especificador tipo ID programa2 | DEFINE ID num programa | ;
especificador ::= AUTO | STATIC | EXTERN | CONST | ;
tipo ::= VOID | CHAR | FLOAT | DOUBLE | SIGNED inteiro | UNSIGNED inteiro | inteiro;

inteiro ::= SHORT | INT | LONG;
programa2 ::= SEMICOLON programa | LBRACK num RBRACK SEMICOLON programa | LPAREN listaParametros RPAREN bloco programa | COMMA listaID programa;

listaID ::= ID declaracaoParam2 listaIDTail;
listaIDTail ::= SEMICOLON | COMMA listaID;
listaParametros ::= listaParamRestante | ;
listaParamRestante ::= declaracaoParam declParamRestante;
declaracaoParam ::= tipo ID declaracaoParam2;
declaracaoParam2 ::= LBRACK num RBRACK | ;
declParamRestante ::= COMMA listaParamRestante | ;
bloco ::= LBRACE conjuntoInst RBRACE;
conjuntoInst ::= | conjuntoInst instrucoes;
instrucoes ::= ID expressao SEMICOLON | RETURN expr SEMICOLON | PRINTF LPAREN expr RPAREN SEMICOLON | SCANF LPAREN ID RPAREN SEMICOLON | BREAK SEMICOLON | instrucoesIf | SEMICOLON | especificador tipo ID SEMICOLON | especificador tipo ID atribuicao SEMICOLON;

instrucoesIf ::= IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE | IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE ELSE LBRACE conjuntoInst RBRACE | IF LPAREN expr RPAREN LBRACE conjuntoInst RBRACE ELSE instrucoesIf;

expressao ::= atribuicao | LBRACK expr RBRACK atribuicao | LPAREN exprList RPAREN | ;
atribuicao ::= operadorAtrib expr;
operadorAtrib ::= EQ | MULTEQ | DIVEQ | MODEQ | PLUSEQ | MINUSEQ;
expr ::= exprAnd exprOr;
exprList ::= expr exprListTail | ;
exprListTail ::= COMMA exprList | ;
exprOr ::= OR exprAnd exprOr | ;
exprAnd ::= exprEqual exprAnd2;
exprAnd2 ::= AND exprEqual exprAnd2 | ;
exprEqual ::= exprRelational exprEqual2;
exprEqual2 ::= EQEQ exprRelational exprEqual2 | NOTEQ exprRelational exprEqual2 | ;
exprRelational ::= exprPlus exprRelational2;
exprRelational2 ::= LT exprPlus exprRelational2 | LTEQ exprPlus exprRelational2 | GT exprPlus exprRelational2 | GTEQ exprPlus exprRelational2 | ;

exprPlus ::= exprMult exprPlus2;
exprPlus2 ::= PLUS exprMult exprPlus2 | MINUS exprMult exprPlus2 | ;
exprMult ::= exprUnary exprMult2;
exprMult2 ::= MULT exprUnary exprMult2 | DIV exprUnary exprMult2 | ;
exprUnary ::= PLUS exprParenthesis | MINUS exprParenthesis | exprParenthesis;
exprParenthesis ::= LPAREN expr RPAREN | primary;
primary ::= ID primaryID | num | literal;
primaryID ::= LBRACK primary RBRACK | LPAREN exprList RPAREN | ;

literal ::= STRING | CHAR;
num ::= NUM_INT | NUM_FLOAT;